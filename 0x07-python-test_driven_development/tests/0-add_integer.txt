# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.
Returns the addition of its two arguments

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding 2 and 3
    >>> add_integer(2, 3)
    5

Adding 2 and -3
    >>> add_integer(2, -3)
    -1

floats are casted to ints before addition is performed
    >>> add_integer(2.9, 0.2)
    2

floats are casted to ints before addition is performed
    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating point values
    >>> add_integer(2.3, -3)
    -1

a as 2, b is 98 by default
    >>> add_integer(2)
    100

Non-Numbers
===========

a is a string
    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

b is a string
    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

a is none
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

b is none
    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

Case both non-integer and non-floats:

    >>> add_integer("hello", "alx")
    Traceback (most recent call last):
    TypeError: a must be an integer

Case overflow:

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     
Case overflow 2:

    >>> add_integer(float('inf'), float('- inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
